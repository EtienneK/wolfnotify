/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/apps': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all apps
     * @description This endpoint returns a list of all apps.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__AppListResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/clients': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get paired clients
     * @description This endpoint returns a list of all paired clients.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__PairedClientsResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/events': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Subscribe to events
     * @description This endpoint allows clients to subscribe to events using SSE
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/openapi-schema': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Return this OpenAPI schema as JSON */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/pair/pending': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get pending pair requests
     * @description This endpoint returns a list of Moonlight clients that are currently waiting to be paired.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__PendingPairRequestsResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sessions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all stream sessions
     * @description This endpoint returns a list of all active stream sessions.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__StreamSessionListResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/apps/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add an app */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['rfl__Reflector_wolf__core__events__App___ReflType'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/apps/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Remove an app */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__AppDeleteRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/clients/settings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update client settings
     * @description Update a client's settings including app state folder and client-specific settings
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__UpdateClientSettingsRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/pair/client': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Pair a client */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__PairRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/runners/start': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Start a runner in a given session */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__RunnerStartRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sessions/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new stream session */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['rfl__Reflector_wolf__core__events__StreamSession___ReflType'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__StreamSessionCreated'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sessions/input': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Handle input for a stream session */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__StreamSessionHandleInputRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sessions/pause': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Pause a stream session */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__StreamSessionPauseRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sessions/start': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Start a stream session */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__StreamSessionStartRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sessions/stop': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Stop a stream session */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__StreamSessionStopRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/unpair/client': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Unpair a client */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['wolf__api__UnpairClientRequest'];
        };
      };
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericSuccessResponse'];
          };
        };
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['wolf__api__GenericErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    rfl__Reflector_wolf__core__events__App___ReflType: {
      title: string;
      id: string;
      support_hdr: boolean;
      icon_png_path?: string | null;
      h264_gst_pipeline: string;
      hevc_gst_pipeline: string;
      av1_gst_pipeline: string;
      render_node: string;
      opus_gst_pipeline: string;
      start_virtual_compositor: boolean;
      start_audio_server: boolean;
      runner: components['schemas']['wolf__config__AppCMD__tagged'] | components['schemas']['wolf__config__AppDocker__tagged'] | components['schemas']['wolf__config__AppChildSession__tagged'];
    };
    rfl__Reflector_wolf__core__events__StreamSession___ReflType: {
      app_id: string;
      client_id: string;
      client_ip: string;
      aes_key: string;
      aes_iv: string;
      rtsp_fake_ip: string;
      video_width: number;
      video_height: number;
      video_refresh_rate: number;
      audio_channel_count: number;
      client_settings: components['schemas']['wolf__config__ClientSettings'];
    };
    wolf__api__AppDeleteRequest: {
      id: string;
    };
    wolf__api__AppListResponse: {
      success: boolean;
      apps: components['schemas']['rfl__Reflector_wolf__core__events__App___ReflType'][];
    };
    wolf__api__GenericErrorResponse: {
      success: boolean;
      error: string;
    };
    wolf__api__GenericSuccessResponse: {
      success: boolean;
    };
    wolf__api__PairRequest: {
      pair_secret: string;
      /** @description The PIN created by the remote Moonlight client */
      pin: string;
    };
    wolf__api__PairedClient: {
      client_id: string;
      app_state_folder: string;
      settings: components['schemas']['wolf__config__ClientSettings'];
    };
    wolf__api__PairedClientsResponse: {
      success: boolean;
      clients: components['schemas']['wolf__api__PairedClient'][];
    };
    wolf__api__PartialClientSettings: {
      run_uid?: number | null;
      run_gid?: number | null;
      controllers_override?: ('XBOX' | 'PS' | 'NINTENDO' | 'AUTO')[] | null;
      mouse_acceleration?: number | null;
      v_scroll_acceleration?: number | null;
      h_scroll_acceleration?: number | null;
    };
    wolf__api__PendingPairClient: {
      pair_secret: string;
      /** @description The IP of the remote Moonlight client */
      client_ip: string;
    };
    wolf__api__PendingPairRequestsResponse: {
      success: boolean;
      requests: components['schemas']['wolf__api__PendingPairClient'][];
    };
    wolf__api__RunnerStartRequest: {
      stop_stream_when_over: boolean;
      runner: components['schemas']['wolf__config__AppCMD__tagged'] | components['schemas']['wolf__config__AppDocker__tagged'] | components['schemas']['wolf__config__AppChildSession__tagged'];
      session_id: string;
    };
    wolf__api__StreamSessionCreated: {
      success: boolean;
      session_id: string;
    };
    wolf__api__StreamSessionHandleInputRequest: {
      session_id: string;
      /** @description A HEX encoded Moonlight input packet, for the full format see: games-on-whales.github.io/wolf/stable/protocols/input-data.html */
      input_packet_hex: string;
    };
    wolf__api__StreamSessionListResponse: {
      success: boolean;
      sessions: components['schemas']['rfl__Reflector_wolf__core__events__StreamSession___ReflType'][];
    };
    wolf__api__StreamSessionPauseRequest: {
      session_id: string;
    };
    wolf__api__StreamSessionStartRequest: {
      session_id: string;
      video_session: components['schemas']['wolf__core__events__VideoSession'];
      audio_session: components['schemas']['wolf__core__events__AudioSession'];
    };
    wolf__api__StreamSessionStopRequest: {
      session_id: string;
    };
    wolf__api__UnpairClientRequest: {
      /** @description The client ID to unpair */
      client_id: string;
    };
    wolf__api__UpdateClientSettingsRequest: {
      /** @description The client ID to identify the client (derived from certificate) */
      client_id: string;
      /** @description New app state folder path (optional) */
      app_state_folder: string | null;
      /** @description Client settings to update (only specified fields will be updated) */
      settings: components['schemas']['wolf__api__PartialClientSettings'] | null;
    };
    wolf__config__AppCMD__tagged: {
      /** @enum {string} */
      type: 'process';
      run_cmd: string;
    };
    wolf__config__AppChildSession__tagged: {
      /** @enum {string} */
      type: 'child_session';
      parent_session_id: string;
    };
    wolf__config__AppDocker__tagged: {
      /** @enum {string} */
      type: 'docker';
      name: string;
      image: string;
      mounts: string[];
      env: string[];
      devices: string[];
      ports: string[];
      base_create_json?: string | null;
    };
    wolf__config__ClientSettings: {
      run_uid: number;
      run_gid: number;
      controllers_override: ('XBOX' | 'PS' | 'NINTENDO' | 'AUTO')[];
      mouse_acceleration: number;
      v_scroll_acceleration: number;
      h_scroll_acceleration: number;
    };
    wolf__core__audio__AudioMode: {
      channels: number;
      streams: number;
      coupled_streams: number;
      speakers: ('FRONT_LEFT' | 'FRONT_RIGHT' | 'FRONT_CENTER' | 'LOW_FREQUENCY' | 'BACK_LEFT' | 'BACK_RIGHT' | 'SIDE_LEFT' | 'SIDE_RIGHT' | 'MAX_SPEAKERS')[];
      bitrate: number;
      sample_rate: number;
    };
    wolf__core__events__AudioSession: {
      gst_pipeline: string;
      session_id: number;
      encrypt_audio: boolean;
      aes_key: string;
      aes_iv: string;
      port: number;
      wait_for_ping: boolean;
      client_ip: string;
      rtp_secret_payload: number[];
      packet_duration: number;
      audio_mode: components['schemas']['wolf__core__audio__AudioMode'];
    };
    wolf__core__events__VideoSession: {
      display_mode: components['schemas']['wolf__core__virtual_display__DisplayMode'];
      gst_pipeline: string;
      session_id: number;
      port: number;
      timeout_ms: number;
      wait_for_ping: boolean;
      packet_size: number;
      frames_with_invalid_ref_threshold: number;
      fec_percentage: number;
      min_required_fec_packets: number;
      bitrate_kbps: number;
      slices_per_frame: number;
      /** @enum {string} */
      color_range: 'JPEG' | 'MPEG';
      /** @enum {string} */
      color_space: 'BT601' | 'BT709' | 'BT2020';
      client_ip: string;
      rtp_secret_payload: number[];
    };
    wolf__core__virtual_display__DisplayMode: {
      width: number;
      height: number;
      refreshRate: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
